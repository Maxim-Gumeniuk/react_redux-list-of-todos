{"version":3,"sources":["types/Status.ts","features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["Status","actions","todo","type","payload","currentTodoReducer","state","action","initialState","query","status","ALL","value","filterReducer","filters","todosReducer","todos","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","dispatch","Alltodos","useMemo","filteredTodos","ACTIVE","completed","COMPLETED","title","toLowerCase","includes","length","className","map","id","classNames","onClick","currentTodoActions","changeCurrentTodo","TodoFilter","handleQuery","filterActions","onSubmit","event","preventDefault","onChange","handleStatus","target","placeholder","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","getTodos","Loader","TodoModal","useState","user","setUser","isLoading","setIsLoading","fetchUser","a","userFromServer","useEffect","userId","href","email","name","App","loading","setLoading","todosFromServer","todoAction","Error","getTodosFromServer","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.71608ff0.chunk.js","sourcesContent":["export enum Status {\n  ALL = 'all',\n  ACTIVE = 'active',\n  COMPLETED = 'completed',\n}\n","import { Todo } from '../types/Todo';\n\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype StatusAction = { type: 'filter/STATUS'; payload: Status };\ntype QuerysAction = { type: 'filter/QUERY'; payload: string };\n\ntype Action = StatusAction | QuerysAction;\n\nconst status = (value: Status): StatusAction => ({\n  type: 'filter/STATUS',\n  payload: value,\n});\n\nconst query = (value: string): QuerysAction => ({\n  type: 'filter/QUERY',\n  payload: value,\n});\n\ntype State = {\n  query: string;\n  status: Status;\n};\n\nconst initialState: State = {\n  query: '',\n  status: Status.ALL,\n};\n\nconst filterReducer = (\n  filters: State = initialState,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'filter/STATUS':\n      return { ...filters, status: action.payload };\n    case 'filter/QUERY':\n      return { ...filters, query: action.payload };\n    default:\n      return filters;\n  }\n};\n\nexport const actions = { status, query };\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype AddAction = {\n  type: 'todos/ADD',\n  payload: Todo[]\n};\n\ntype Action = AddAction;\n\nconst add = (value: Todo[]): Action => ({\n  type: 'todos/ADD',\n  payload: value,\n});\n\nconst todosReducer = (todos: Todo[] = [], action: Action): Todo[] => {\n  switch (action.type) {\n    case 'todos/ADD':\n      return action.payload;\n\n    default:\n      return todos;\n  }\n};\n\nexport const actions = { add };\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/* eslint-disable max-len */\nimport classNames from 'classnames';\nimport React, { useMemo } from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\nimport { Status } from '../../types/Status';\nimport { Todo } from '../../types/Todo';\n\nexport const TodoList: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const todos = useAppSelector(state => state.todos);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const status = useAppSelector(state => state.filter.status);\n  const query = useAppSelector(state => state.filter.query);\n\n  const Alltodos = useMemo(() => {\n    let filteredTodos = todos.filter(todo => {\n      switch (status) {\n        case Status.ACTIVE:\n          return !todo.completed;\n\n        case Status.COMPLETED:\n          return todo.completed;\n\n        case Status.ALL:\n        default:\n          return todo;\n      }\n    });\n\n    if (query) {\n      filteredTodos = filteredTodos.filter(todo => {\n        return todo.title.toLowerCase().includes(query.toLowerCase());\n      });\n    }\n\n    return filteredTodos;\n  }, [todos, status, query]);\n\n  const changeCurrentTodo = (todo: Todo) => {\n    dispatch(currentTodoActions.setTodo(todo));\n  };\n\n  if (Alltodos.length === 0) {\n    return (\n      <p className=\"notification is-warning\">\n        There are no todos matching current filter criteria\n      </p>\n    );\n  }\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {Alltodos.map(todo => (\n          <tr\n            data-cy=\"todo\"\n            key={todo.id}\n            className={todo.id === currentTodo?.id ? 'has-background-info-light' : ''}\n          >\n            <td className=\"is-vcentered\">{todo.id}</td>\n            <td className=\"is-vcentered\">\n              {todo.completed && (\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              )}\n            </td>\n\n            <td className=\"is-vcentered is-expanded\">\n              <p className={classNames({\n                'has-text-danger': !todo.completed,\n                'has-text-success': todo.completed,\n              })}\n              >\n                {todo.title}\n              </p>\n            </td>\n\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                aria-label=\"Select todo button\"\n                type=\"button\"\n                onClick={() => changeCurrentTodo(todo)}\n              >\n                <span className=\"icon\">\n                  <i className=\"far fa-eye\" />\n                </span>\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as filterActions } from '../../features/filter';\nimport { Status } from '../../types/Status';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const status = useAppSelector(state => state.filter.status);\n  const query = useAppSelector(state => state.filter.query);\n\n  const handleStatus = (value: string) => {\n    switch (value) {\n      case Status.ACTIVE:\n        return dispatch(filterActions.status(Status.ACTIVE));\n\n      case Status.COMPLETED:\n        return dispatch(filterActions.status(Status.COMPLETED));\n\n      case Status.ALL:\n      default:\n        return dispatch(filterActions.status(Status.ALL));\n    }\n  };\n\n  const handleQuery = (value: string) => {\n    dispatch(filterActions.query(value));\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={status}\n            onChange={event => handleStatus(event.target.value)}\n          >\n            <option value={Status.ALL}>All</option>\n            <option value={Status.ACTIVE}>Active</option>\n            <option value={Status.COMPLETED}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={event => handleQuery(event.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              aria-label=\"Clear search\"\n              className=\"delete\"\n              onClick={() => handleQuery('')}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { getUser } from '../../api';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\nexport const TodoModal: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  const fetchUser = async (id: number) => {\n    try {\n      const userFromServer = await getUser(id);\n\n      setUser(userFromServer);\n    } catch {\n      setUser(null);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    if (!currentTodo) {\n      return;\n    }\n\n    fetchUser(currentTodo.userId);\n  }, [currentTodo]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n      {isLoading\n        ? <Loader />\n        : (\n          <div className=\"modal-card\">\n            <header className=\"modal-card-head\">\n              <div\n                className=\"modal-card-title has-text-weight-medium\"\n                data-cy=\"modal-header\"\n              >\n                {`Todo #${currentTodo?.id}`}\n              </div>\n\n              <button\n                type=\"button\"\n                className=\"delete\"\n                data-cy=\"modal-close\"\n                aria-label=\"modal-close\"\n                onClick={() => dispatch(currentTodoActions.removeTodo())}\n              />\n            </header>\n\n            <div className=\"modal-card-body\">\n              <p className=\"block\" data-cy=\"modal-title\">\n                {currentTodo?.title}\n              </p>\n\n              <p className=\"block\" data-cy=\"modal-user\">\n                {currentTodo?.completed ? (\n                  <strong className=\"has-text-success\">Done</strong>\n                ) : (\n                  <strong className=\"has-text-danger\">Planned</strong>\n                )}\n                {user && (\n                  <>\n                    {' by '}\n                    <a href={`mailto:${user.email}`}>{user.name}</a>\n                  </>\n                )}\n              </p>\n            </div>\n          </div>\n        )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { useDispatch } from 'react-redux';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\n// import { Todo } from './types/Todo';\nimport { getTodos } from './api';\nimport { useAppSelector } from './app/hooks';\nimport { actions as todoAction } from './features/todos';\n\nexport const App: React.FC = () => {\n  const dispatch = useDispatch();\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const [loading, setLoading] = useState(false);\n\n  async function getTodosFromServer() {\n    try {\n      const todosFromServer = await getTodos();\n\n      dispatch(todoAction.add(todosFromServer));\n    } catch {\n      throw new Error();\n    } finally {\n      setLoading(true);\n    }\n  }\n\n  useEffect(() => {\n    getTodosFromServer();\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            {loading ? (\n              <>\n                <h1 className=\"title\">Todos:</h1>\n\n                <div className=\"block\">\n                  <TodoFilter />\n                </div>\n\n                <div className=\"block\">\n                  <TodoList />\n                </div>\n              </>\n\n            ) : <Loader />}\n          </div>\n        </div>\n      </div>\n\n      { currentTodo && (<TodoModal />)}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}